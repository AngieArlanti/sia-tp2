function weights = train(inputs, weights, expectedOutputs, etha=0.5)  #inputsWithBiases = addBiasesToInputs(input);  #inputsWithBiases  learn = 0;  indexShuffle = randperm(length(inputs));  for i = 1:length(inputs)    #network = feedforward(inputsWithBiases{i}, weights); # FIXME: Por ahora solo toma el primero para simplificar    network = feedforward(inputs{indexShuffle(i)}, weights);    network    weights    lastLayer = network{end};    layerCount = length(network) - 1;    hiddenLayersCount = layerCount - 1;    lastHiddenLayerIndex = length(network) - 1;    weightVariations = {};    weightVariationsIndex = length(weights);    V = [];    delta = [];    #OutputLayer delta calculation    error = expectedOutputs{indexShuffle{i}} - activationFunction(lastLayer);    delta =  error * derivativeActivationFunction(lastLayer);    V = activationFunction(network{lastHiddenLayerIndex});    weightVariation = V'*delta * etha;    weightVariation    #weights{hiddenLayersCount} += weightVariation;    #weights{hiddenLayersCount}    weightVariations{weightVariationsIndex} = weightVariation;    deltaHiddenLayer = delta;    #First network's index are inputs.    for j = lastHiddenLayerIndex:-1:3      currentLayer = network{j};      nextLayer = network{j-1};      derivative = derivativeActivationFunction(currentLayer);      Wij = weights{weightVariationsIndex};      deltaHiddenLayer = (deltaHiddenLayer * Wij) * derivative;      V = activationFunction(nextLayer);      weightVariation = V'*deltaHiddenLayer * etha;      weightVariations{weightVariationsIndex-1} = weightVariation;      weightVariationsIndex --;    endfor    inputLayer = network{1};    deltaHiddenLayer    deltaHiddenLayer = derivativeActivationFunction(network{2})*(deltaHiddenLayer* weights{weightVariationsIndex});    weightVariation = inputLayer'*deltaHiddenLayer * etha;    #weights{1} += weightVariation;    weightVariations{weightVariationsIndex-1} = weightVariation;  endfor  for i = 1:length(weights)    weightVariations    weights{i} = weights{i} + weightVariations{i};  endforendfunction