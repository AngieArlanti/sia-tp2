function updatedWeights = train(input, weights, expectedOutput, etha=0.5)  network = feedforward(input, weights);  error = expectedOutput-network{end};  updatedWeights = weights;    V = [];  delta = [];  lastLayer = network{end};  hiddenLayersCount = length(network)-1;    V = activationFunction(lastLayer);     delta =  error * derivativeActivationFunction(lastLayer);  V  delta  weightVariation = V*delta' * etha;  updatedWeights{hiddenLayersCount} += weightVariation;  lastLayerWeightsIndex = hiddenLayersCount;    deltaHiddenLayer = delta;  for i = hiddenLayersCount:-1:2    currentLayer = network{i};      V = activationFunction(currentLayer);    deltaHiddenLayer = derivativeActivationFunction(currentLayer)*(deltaHiddenLayer* updatedWeights{lastLayerWeightsIndex});    weightVariation = V*deltaHiddenLayer' * etha;    deltaHiddenLayer    V    updatedWeights{i-1} += weightVariation;    lastLayerWeightsIndex = length(currentLayer)-1;      endfor    inputLayer = network{1};  deltaHiddenLayer = derivativeActivationFunction(inputLayer)*(deltaHiddenLayer* updatedWeights{lastLayerWeightsIndex});  weightVariation = inputLayer*deltaHiddenLayer' * etha;  updatedWeights{1} += weightVariation;  endfunction