function updatedWeights = train(inputs, weights, expectedOutputs, etha=0.5)  #inputsWithBiases = addBiasesToInputs(input);  #inputsWithBiases  for i = 1:length(inputs)    #network = feedforward(inputsWithBiases{i}, weights); # FIXME: Por ahora solo toma el primero para simplificar    network = feedforward(inputs{i}, weights);    error = expectedOutputs{i} - network{end};    updatedWeights = weights;    V = [];    delta = [];    lastLayer = network{end};    hiddenLayersCount = length(network)-1;    V = activationFunction(lastLayer);    delta =  error * derivativeActivationFunction(lastLayer);    weightVariation = V*delta' * etha;    updatedWeights{hiddenLayersCount} += weightVariation;    updatedWeights{hiddenLayersCount}    lastLayerWeightsIndex = hiddenLayersCount;    hiddenLayersCount --;    deltaHiddenLayer = delta;    for i = hiddenLayersCount:-1:2      currentLayer = network{i+1};      V = activationFunction(currentLayer);      updatedWeights{lastLayerWeightsIndex}      deltaHiddenLayer = (deltaHiddenLayer * updatedWeights{lastLayerWeightsIndex}) * derivativeActivationFunction(currentLayer);      weightVariation = V*deltaHiddenLayer' * etha;      updatedWeights{i-1} += weightVariation;      lastLayerWeightsIndex = length(network)-1;    endfor    inputLayer = network{1};    deltaHiddenLayer = derivativeActivationFunction(inputLayer)*(deltaHiddenLayer* updatedWeights{1});    weightVariation = inputLayer*deltaHiddenLayer' * etha;    updatedWeights{1} += weightVariation;  endforendfunction